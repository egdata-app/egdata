const customAttributes = [
  // EGStore (Offers)
  'com.epicgames.app.blacklist',
  'com.epicgames.app.whitelist',
  'com.epicgames.app.developerName',
  'com.epicgames.app.publisherName',
  'com.epicgames.app.offerId',
  'com.epicgames.app.offerNs',
  'com.epicgames.app.productSlug', // item can also have this
  'com.epicgames.app.weight',
  'com.epicgames.app.freegames.vault.close',
  'com.epicgames.app.freegames.vault.open',
  'com.epicgames.app.freegames.vault.slug',
  'com.epicgames.portal.product.contactSupportUrl',
  'com.epicgames.portal.product.privacyPolicyUrl',
  'com.epicgames.portal.product.websiteUrl',
  'RequirementsJson',
  'RquirementsJson', // really epic...
  'developerName',
  'publisherName',

  // EGStore (Items)
  'ActionSetName',
  'AppAccessType',
  'UseAccessControl', // ue too
  'useAccessControl',
  'remove_for_account_deprovision', // bool
  'AndroidCommandLine',
  'AdditionalCommandLine',
  'AdditionalCommandline',
  'AllowMultipleInstances',
  'CanSkipKoreanIdVerification',
  'CanRunOffline',
  'HasGateKeeper',
  'isPrepurchase',
  'SupportPlatforms',
  'SupportedPlatform',
  'SupportedPlatforms', // comma separated
  'SupportedPlatorms',
  'FolderName',
  'folderName',

  'NeverUpdate',
  'neverUpdate',
  'NeverUpdateAfterInitialInatall',

  // 3rd parties
  'parentPartnerLinkID',
  'parentPartnerLinkId',
  'parentPartnerLinkType',
  'partnerLinkID',
  'partnerLinkId',
  'PartnerLinkId',
  'partnerLinkType', // e.g. ubisoft
  'partnerType',
  'isUplay',
  'ThirdPartyManagedApp',
  'ThirdPartyManagedProvider', // e.g. UbisoftConnect
  'GameID', // e.g. "720"
  'RegistryPath',
  'RegistryKey',
  'RegistryLocation',

  // EOS Presence
  'PresenceID',
  'PresenceId',
  'PresenceeId',
  'MonitorPresence', // bool
  'MonitorPresense',

  // EOS Cloudsaves
  'MaxSizeMB',
  'CLoudSaveFolder',
  'CloudExcludeList',
  'CloudIncludeList',
  'CloudSaveFolder',
  'CloudSaveFolderMAC',
  'CloudSaveFolder_MAC',
  'CloudSaveFolder_Mac',

  // EOS Offer config
  'autoGeneratedPrice', // bool
  'isBlockchainUsed', // bool
  'isManuallySetViewableDate', // bool
  'isManuallySetPCReleaseDate', // bool
  'releaseDate', // iso date string

  // unreal tournament
  'Type', //e.g. "Map"
  'TechnicalType', //e.g. "externalcontent"
  'TutorialDifficultly', // e.g. "intermediate"
  'FollowUpTutorial01',
  'FollowUpTutorial01Link',
  'FollowUpTutorial02',
  'FollowUpTutorial02Link',
  'TutorialLength', // e.g. "15 min"

  // other stuff (;
  'AllowUriCmdArgs',
  'AllowedUriEnvVars',
  'BackgroundProcessNames',
  'DisablePresenceWhileRunning',
  'DlcProcessNames',
  'ExternalProcessNames',
  'LaunchElevated',
  'LaunchSocialOnFirstInstall',
  'MainWindowProcessName',
  'MainWindowsProcessName',
  'ORG_PORTAL_DISPLAY_NAME',
  'OwnershipToken',
  'PlatformSupported',
  'ProcessName',
  'ProcessNames',
  'RequiresAdminElevation',
  'SkipAutoInstalIDlc',
  'SkipAutoInstallDlc',
  'SysTrayRestore',
  'TouchPadCheck',
  'releaseDate',
  'availableDate',
  'defaultLaunchOption_Args',
  'egs_library_display_version',
  'mods_installPath',
  'productGeneration',

  // UE Marketplace (Items)
  'BuyLink',
  'CanSkipCabinedWarning',
  'NotarizedAndSigned', // bool
  'notarizedAndSigned',
  'promotionalContent', // bool

  // Mods (Offers)
  'socialNetworks.twitch',
  'socialNetworks.twitter',
  'socialNetworks.instagram',
  'socialNetworks.facebook',
  'socialNetworks.youTube',
  'socialNetworks.discord',
  'socialNetworks.reddit',
];

/**
 * List of custom attributes that should be displayed in the game details page.
 * for example: External Launchers, Presence settings, etc.
 */
const gameFeatures = [
  'ThirdPartyManagedApp',
  'MonitorPresense',
  'PresenceId',
  'parentPartnerLinkType',
  'partnerLinkType',
  'partnerLinkId',
  'partnerType',
  'isUplay',
  'isPrepurchase',
  'ThirdPartyManagedProvider',
  'PlatformSupported',
];

export function getGameFeatures(attributes: {
  [key: (typeof customAttributes)[number]]: {
    type: string;
    value: string;
  };
}) {
  const features = Object.keys(attributes).filter((key) =>
    gameFeatures.includes(key),
  );

  return features;
}
